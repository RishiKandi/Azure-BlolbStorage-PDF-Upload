{"mappings":"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","sources":["index.js"],"sourcesContent":["// const { BlobServiceClient } = require(\"@azure/storage-blob\");\r\n// const selectButton = document.getElementById(\"select-button\");\r\n// const fileInput = document.getElementById(\"file-input\");\r\n// const listButton = document.getElementById(\"list-button\");\r\n\r\n// // Update <placeholder> with your Blob service SAS URL string\r\n// const blobSasUrl = \"https://blobstorageeeee.blob.core.windows.net/profilephoto?sp=racwdl&st=2023-04-12T05:23:49Z&se=2023-05-16T13:23:49Z&spr=https&sv=2021-12-02&sr=c&sig=TlpiqNWimPN71DeZqGVRjy%2F8cjNFXTBkFbVoWT6sKPs%3D\";\r\n// // Create a new BlobServiceClient\r\n// const blobServiceClient = new BlobServiceClient(blobSasUrl);\r\n\r\n// // Create a unique name for the container by \r\n// // appending the current time to the file name\r\n// const containerName = \"profilephoto\" ;\r\n\r\n// // Get a container client from the BlobServiceClient\r\n// const containerClient = blobServiceClient.getContainerClient(containerName);\r\n\r\n// const listFiles = async () => {\r\n//     fileList.size = 0;\r\n//     fileList.innerHTML = \"\";\r\n//     try {\r\n//         reportStatus(\"Retrieving file list...\");\r\n//         let iter = containerClient.listBlobsFlat();\r\n//         let blobItem = await iter.next();\r\n//         while (!blobItem.done) {\r\n//             fileList.size += 1;\r\n//             fileList.innerHTML += `<option>${blobItem.value.name}</option>`;\r\n\r\n\r\n//             blobItem = await iter.next();\r\n//         }\r\n//         if (fileList.size > 0) {\r\n//             reportStatus(\"Done.\");\r\n//         } else {\r\n//             reportStatus(\"The container does not contain any files.\");\r\n//         }\r\n//     } catch (error) {\r\n//         reportStatus(error.message);\r\n//     }\r\n// };\r\n\r\n// listButton.addEventListener(\"click\", listFiles);\r\n\r\n// const uploadFiles = async () => {\r\n//     try {\r\n//         reportStatus(\"Uploading files...\");\r\n//         const promises = [];\r\n//         for (const file of fileInput.files) {\r\n//             const blockBlobClient = containerClient.getBlockBlobClient(file.name);\r\n//             promises.push(blockBlobClient.uploadBrowserData(file));\r\n//         }\r\n//         await Promise.all(promises);\r\n//         reportStatus(\"Done.\");\r\n//         listFiles();\r\n//     }\r\n//     catch (error) {\r\n//             reportStatus(error.message);\r\n//     }\r\n// }\r\n\r\n// selectButton.addEventListener(\"click\", () => fileInput.click());\r\n// fileInput.addEventListener(\"change\", uploadFiles);\r\n\r\n\r\n// const fileInput = document.getElementById('file-input');\r\n// const previewButton = document.getElementById('preview-button');\r\n// const previewContainer = document.getElementById('preview-container');\r\n\r\n// previewButton.addEventListener('click', () => {\r\n//   const file = fileInput.files[0];\r\n//   const reader = new FileReader();\r\n  \r\n//   reader.addEventListener('load', () => {\r\n//     const fileContent = reader.result;\r\n//     const fileType = file.type;\r\n\r\n//     if (fileType === 'application/pdf') {\r\n//       // Use PDF.js to render the PDF file on the page\r\n//       const pdfViewer = document.createElement('iframe');\r\n//       pdfViewer.src = `https://mozilla.github.io/pdf.js/web/viewer.html?file=${fileContent}`;\r\n//       previewContainer.appendChild(pdfViewer);\r\n//     } else if (fileType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' ||\r\n//                fileType === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') {\r\n//       // Use Microsoft Office Web Viewer to display Word and Excel files\r\n//       const officeViewer = document.createElement('iframe');\r\n//       officeViewer.src = `https://view.officeapps.live.com/op/view.aspx?src=${fileContent}`;\r\n//       previewContainer.appendChild(officeViewer);\r\n//     } else {\r\n//       // Unsupported file type\r\n//       alert('Unsupported file type');\r\n//     }\r\n//   });\r\n  \r\n//   reader.readAsDataURL(file);\r\n// });\r\n\r\n\r\n\r\n// function PreviewImage() {\r\n//     pdffile=document.getElementById(\"uploadPDF\").files[0];\r\n//     pdffile_url=URL.createObjectURL(pdffile);\r\n//     $('#viewer').attr('src',pdffile_url);\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n// If absolute URL from the remote server is provided, configure the CORS\r\n// header on that server.\r\n// var url = 'https://raw.githubusercontent.com/mozilla/pdf.js/ba2edeae/web/compressed.tracemonkey-pldi-09.pdf';\r\n\r\n// // Loaded via <script> tag, create shortcut to access PDF.js exports.\r\n// var pdfjsLib = window['pdfjs-dist/build/pdf'];\r\n\r\n// // The workerSrc property shall be specified.\r\n// pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';\r\n\r\n// var pdfDoc = null,\r\n//     pageNum = 1,\r\n//     pageRendering = false,\r\n//     pageNumPending = null,\r\n//     scale = 0.8,\r\n//     canvas = document.getElementById('the-canvas'),\r\n//     ctx = canvas.getContext('2d');\r\n\r\n// /**\r\n//  * Get page info from document, resize canvas accordingly, and render page.\r\n//  * @param num Page number.\r\n//  */\r\n// function renderPage(num) {\r\n//   pageRendering = true;\r\n//   // Using promise to fetch the page\r\n//   pdfDoc.getPage(num).then(function(page) {\r\n//     var viewport = page.getViewport({scale: scale});\r\n//     canvas.height = viewport.height;\r\n//     canvas.width = viewport.width;\r\n\r\n//     // Render PDF page into canvas context\r\n//     var renderContext = {\r\n//       canvasContext: ctx,\r\n//       viewport: viewport\r\n//     };\r\n//     var renderTask = page.render(renderContext);\r\n\r\n//     // Wait for rendering to finish\r\n//     renderTask.promise.then(function() {\r\n//       pageRendering = false;\r\n//       if (pageNumPending !== null) {\r\n//         // New page rendering is pending\r\n//         renderPage(pageNumPending);\r\n//         pageNumPending = null;\r\n//       }\r\n//     });\r\n//   });\r\n\r\n//   // Update page counters\r\n//   document.getElementById('page_num').textContent = num;\r\n// }\r\n\r\n// /**\r\n//  * If another page rendering in progress, waits until the rendering is\r\n//  * finised. Otherwise, executes rendering immediately.\r\n//  */\r\n// function queueRenderPage(num) {\r\n//   if (pageRendering) {\r\n//     pageNumPending = num;\r\n//   } else {\r\n//     renderPage(num);\r\n//   }\r\n// }\r\n\r\n// /**\r\n//  * Displays previous page.\r\n//  */\r\n// function onPrevPage() {\r\n//   if (pageNum <= 1) {\r\n//     return;\r\n//   }\r\n//   pageNum--;\r\n//   queueRenderPage(pageNum);\r\n// }\r\n// document.getElementById('prev').addEventListener('click', onPrevPage);\r\n\r\n// /**\r\n//  * Displays next page.\r\n//  */\r\n// function onNextPage() {\r\n//   if (pageNum >= pdfDoc.numPages) {\r\n//     return;\r\n//   }\r\n//   pageNum++;\r\n//   queueRenderPage(pageNum);\r\n// }\r\n// document.getElementById('next').addEventListener('click', onNextPage);\r\n\r\n// /**\r\n//  * Asynchronously downloads PDF.\r\n//  */\r\n// pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {\r\n//   pdfDoc = pdfDoc_;\r\n//   document.getElementById('page_count').textContent = pdfDoc.numPages;\r\n\r\n//   // Initial/first page rendering\r\n//   renderPage(pageNum);\r\n// });\r\n// var fileInput = document.getElementById('file-input');\r\n// fileInput.addEventListener('change', function(e) {\r\n//     var file = fileInput.files[0];\r\n//     if (file.type === 'application/pdf') {\r\n//       var fileReader = new FileReader();\r\n  \r\n//       fileReader.onload = function() {\r\n//         var pdfData = new Uint8Array(this.result);\r\n//         pdfjsLib.getDocument(pdfData).promise.then(function(pdfDoc_) {\r\n//           pdfDoc = pdfDoc_;\r\n//           document.getElementById('page_count').textContent = pdfDoc.numPages;\r\n  \r\n//           // Initial/first page rendering\r\n//           renderPage(pageNum);\r\n//         });\r\n//       };\r\n//       fileReader.readAsArrayBuffer(file);\r\n//     } else {\r\n//       alert(\"Please select a PDF file.\");\r\n//     }\r\n//   });\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Loaded via <script> tag, create shortcut to access PDF.js exports.\r\n// var pdfjsLib = window['pdfjs-dist/build/pdf'];\r\n// // The workerSrc property shall be specified.\r\n// pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://mozilla.github.io/pdf.js/build/pdf.worker.js';\r\n\r\n// $(\"#myPdf\").on(\"change\", function(e){\r\n// \tvar file = e.target.files[0]\r\n// \tif(file.type == \"application/pdf\"){\r\n// \t\tvar fileReader = new FileReader();  \r\n// \t\tfileReader.onload = function() {\r\n// \t\t\tvar pdfData = new Uint8Array(this.result);\r\n// \t\t\t// Using DocumentInitParameters object to load binary data.\r\n// \t\t\tvar loadingTask = pdfjsLib.getDocument({data: pdfData});\r\n// \t\t\tloadingTask.promise.then(function(pdf) {\r\n// \t\t\t  console.log('PDF loaded');\r\n\t\t\t  \r\n// \t\t\t  // Fetch the first page\r\n// \t\t\t  var pageNumber = 1;\r\n// \t\t\t  pdf.getPage(pageNumber).then(function(page) {\r\n// \t\t\t\tconsole.log('Page loaded');\r\n\t\t\t\t\r\n// \t\t\t\tvar scale = 1.5;\r\n// \t\t\t\tvar viewport = page.getViewport({scale: scale});\r\n\r\n// \t\t\t\t// Prepare canvas using PDF page dimensions\r\n// \t\t\t\tvar canvas = $(\"#pdfViewer\")[0];\r\n// \t\t\t\tvar context = canvas.getContext('2d');\r\n// \t\t\t\tcanvas.height = viewport.height;\r\n// \t\t\t\tcanvas.width = viewport.width;\r\n\r\n// \t\t\t\t// Render PDF page into canvas context\r\n// \t\t\t\tvar renderContext = {\r\n// \t\t\t\t  canvasContext: context,\r\n// \t\t\t\t  viewport: viewport\r\n// \t\t\t\t};\r\n// \t\t\t\tvar renderTask = page.render(renderContext);\r\n// \t\t\t\trenderTask.promise.then(function () {\r\n// \t\t\t\t  console.log('Page rendered');\r\n// \t\t\t\t});\r\n// \t\t\t  });\r\n// \t\t\t}, function (reason) {\r\n// \t\t\t  // PDF loading error\r\n// \t\t\t  console.error(reason);\r\n// \t\t\t});\r\n// \t\t};\r\n// \t\tfileReader.readAsArrayBuffer(file);\r\n// \t}\r\n// });\r\n\r\n\r\n\r\n// Load PDF.js library and specify worker source\r\n// var pdfjsLib = window['pdfjs-dist/build/pdf'];\r\n// pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://mozilla.github.io/pdf.js/build/pdf.worker.js';\r\n\r\n// // Add event listener for file input change\r\n// $(\"#myPdf\").on(\"change\", function(e) {\r\n//   var file = e.target.files[0];\r\n\r\n//   // Check if file is a PDF\r\n//   if (file.type == \"application/pdf\") {\r\n//     var fileReader = new FileReader();  \r\n\r\n//     // Load PDF file data as array buffer\r\n//     fileReader.onload = function() {\r\n//       var pdfData = new Uint8Array(this.result);\r\n\r\n//       // Load PDF document with PDF.js\r\n//       var loadingTask = pdfjsLib.getDocument({data: pdfData});\r\n\r\n//       // When PDF is loaded successfully\r\n//       loadingTask.promise.then(function(pdf) {\r\n//         console.log('PDF loaded');\r\n\r\n//         // Get the first page of the PDF\r\n//         var pageNumber = 1;\r\n//         pdf.getPage(pageNumber).then(function(page) {\r\n//           console.log('Page loaded');\r\n\r\n//           // Define the scale and viewport of the page\r\n//           var scale = 1.5;\r\n//           var viewport = page.getViewport({scale: scale});\r\n\r\n//           // Get the canvas element and context\r\n//           var canvas = document.getElementById('pdfViewer');\r\n//           var context = canvas.getContext('2d');\r\n\r\n//           // Set the canvas size to match the viewport size\r\n//           canvas.height = viewport.height;\r\n//           canvas.width = viewport.width;\r\n\r\n//           // Render the page into the canvas\r\n//           var renderContext = {\r\n//             canvasContext: context,\r\n//             viewport: viewport\r\n//           };\r\n//           var renderTask = page.render(renderContext);\r\n//           renderTask.promise.then(function() {\r\n//             console.log('Page rendered');\r\n//           });\r\n//         });\r\n//       }, function(reason) {\r\n//         // PDF loading error\r\n//         console.error(reason);\r\n//       });\r\n//     };\r\n//     fileReader.readAsArrayBuffer(file);\r\n//   }\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n// function previewFile() {\r\n//     var previewContainer = document.querySelector('.preview-container');\r\n//     var previewImage = previewContainer.querySelector('.preview-image');\r\n//     var pdfjsLib = window['pdfjs-dist/build/pdf'];\r\n//     // Get the selected file\r\n//     var file = document.querySelector('input[type=file]').files[0];\r\n  \r\n//     // Check if the selected file is a PDF or an image\r\n//     if (file.type.startsWith('image/')) {\r\n//       // If the selected file is an image, display it in the preview container\r\n//       var reader = new FileReader();\r\n//       reader.onloadend = function() {\r\n//         previewImage.src = reader.result;\r\n//       }\r\n//       if (file) {\r\n//         reader.readAsDataURL(file);\r\n//       } else {\r\n//         previewImage.src = \"\";\r\n//       }\r\n//     } else if (file.type == 'application/pdf') {\r\n//       // If the selected file is a PDF, display it in the preview container using PDF.js library\r\n//       var fileReader = new FileReader();\r\n//       fileReader.onload = function() {\r\n//         var typedarray = new Uint8Array(this.result);\r\n//         pdfjsLib.getDocument(typedarray).then(function(pdf) {\r\n//           pdf.getPage(1).then(function(page) {\r\n//             var canvas = document.createElement('canvas');\r\n//             var ctx = canvas.getContext('2d');\r\n//             var viewport = page.getViewport({scale: 1});\r\n//             canvas.width = viewport.width;\r\n//             canvas.height = viewport.height;\r\n//             page.render({canvasContext: ctx, viewport: viewport}).promise.then(function() {\r\n//               previewImage.src = canvas.toDataURL();\r\n//             });\r\n//           });\r\n//         });\r\n//       };\r\n//       fileReader.readAsArrayBuffer(file);\r\n//     }\r\n//   }\r\n  \r\n\r\n\r\nfunction renderPage(num) {\r\n    pageRendering = true;\r\n    // Using promise to fetch the page\r\n    pdfDoc.getPage(num).then(function(page) {\r\n      var viewport = page.getViewport({scale: scale});\r\n      var canvas = document.createElement('canvas');\r\n      var context = canvas.getContext('2d');\r\n      canvas.height = viewport.height;\r\n      canvas.width = viewport.width;\r\n      document.querySelector('#pdf-viewer').appendChild(canvas);\r\n  \r\n      // Render PDF page into canvas context\r\n      var renderContext = {\r\n        canvasContext: context,\r\n        viewport: viewport\r\n      };\r\n      var renderTask = page.render(renderContext);\r\n  \r\n      // Wait for rendering to finish\r\n      renderTask.promise.then(function() {\r\n        pageRendering = false;\r\n        if (pageNumPending !== null) {\r\n          // New page rendering is pending\r\n          renderPage(pageNumPending);\r\n          pageNumPending = null;\r\n        }\r\n      });\r\n    });\r\n  \r\n    // Update page counters\r\n    document.getElementById('page_num').textContent = num;\r\n  }\r\n  \r\n\r\n\r\n\r\nfunction previewFile() {\r\n    var previewContainer = document.querySelector('.preview-container');\r\n    var previewImage = previewContainer.querySelector('.preview-image');\r\n  \r\n    // Get the selected file\r\n    var file = document.querySelector('input[type=file]').files[0];\r\n  \r\n    // Check if the selected file is a PDF or an image\r\n    if (file.type.startsWith('image/')) {\r\n      // If the selected file is an image, display it in the preview container\r\n      var reader = new FileReader();\r\n      reader.onloadend = function() {\r\n        previewImage.src = reader.result;\r\n      }\r\n      if (file) {\r\n        reader.readAsDataURL(file);\r\n      } else {\r\n        previewImage.src = \"\";\r\n      }\r\n    } else if (file.type == 'application/pdf') {\r\n      // If the selected file is a PDF, display it in the preview container using PDF.js library\r\n      pdfjsLib.getDocument({ url: URL.createObjectURL(file) }).promise.then(function(pdf) {\r\n        pdf.getPage(1).then(function(page) {\r\n          var canvas = document.createElement('canvas');\r\n          var ctx = canvas.getContext('2d');\r\n          var viewport = page.getViewport({ scale: 1 });\r\n          canvas.width = viewport.width;\r\n          canvas.height = viewport.height;\r\n          page.render({ canvasContext: ctx, viewport: viewport }).promise.then(function() {\r\n            previewImage.src = canvas.toDataURL();\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }\r\n  \r\n\r\n  "],"names":[],"version":3,"file":"index.c36f364e.js.map","sourceRoot":"/__parcel_source_root/"}